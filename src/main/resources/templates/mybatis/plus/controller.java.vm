package ${package.Controller};

import org.apache.logging.log4j.LogManager;
import ${package.Parent}.common.ResponseEntity;
import ${package.Parent}.bean.param.CommonParam;
import ${package.Entity}.enums.StatusEnum;
import ${package.Entity}.${entity}Entity;
import ${package.Service}.${table.serviceName};
        
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import com.github.pagehelper.PageInfo;

#if(${restControllerStyle})
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("{tenantCode}/#if(${package.ModuleName})/${package.ModuleName}s#end#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}s#else${table.entityPath}s#end")
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end
    @Autowired
    private ${table.serviceName} ${serviceVariableName};

    
    /**
     * 获取分页列表
     * 
     * @param tenantCode 租户代码
     * @param commonParam
     * @return
     */
    @GetMapping("/list-page")
    public ResponseEntity<PageInfo<${entity}Entity>> listPage(@PathVariable(value = "tenantCode")  String tenantCode,CommonParam commonParam) throws Exception {
        return new ResponseEntity<PageInfo<${entity}Entity>>().ok().setResponseContent(${serviceVariableName}.listPage(tenantCode,commonParam));
    }
    
    /**
     * 获取单个对象
     * 
     * @param tenantCode 租户代码
     * @param id
     * @return
     */
    @GetMapping("/get/{id}")
    public ResponseEntity<${entity}Entity> get(@PathVariable(value = "tenantCode")  String tenantCode,@PathVariable(value = "id") ${primaryKeyTypeString} id) throws Exception {
        return new ResponseEntity<${entity}Entity>().ok().setResponseContent(${serviceVariableName}.selectByIdAndTenantCode(tenantCode,id));
    }

    /**
     * 保存对象
     * 
     * @param tenantCode 租户代码
     * @param ${entityVariableName}
     * @return
     */
    @PostMapping("/save")
    public ResponseEntity<Boolean> save(@PathVariable(value = "tenantCode")  String tenantCode, @RequestBody ${entity}Entity ${entityVariableName}) throws Exception {

            ${entityVariableName}.setTenantCode(tenantCode);
            ${entityVariableName}.setCreateUserId(111L); // 创建者 TODO 测试
            ${entityVariableName}.setUpdateUserId(111L); // 最后修改者 TODO 测试
	        if (!${serviceVariableName}.insert(${entityVariableName})){
	            return new ResponseEntity<Boolean>().badRequest("保存失败");    
	        }
            return new ResponseEntity<Boolean>().ok("保存成功");
    }

    /**
     * 更新
     * 
     * @param tenantCode 租户代码
     * @param id
     * @param ${entityVariableName}
     * @return
     */
    @PostMapping("/update/{id}")
    public ResponseEntity<Boolean> update(@PathVariable(value = "tenantCode")  String tenantCode,@PathVariable(value = "id") ${primaryKeyTypeString} id,
                                              ${entity}Entity ${entityVariableName}) throws Exception {

            ${entityVariableName}.setId(id).setTenantCode(tenantCode);
            ${entityVariableName}.setUpdateUserId(111L); // 最后修改者 TODO 测试
	        if (!${serviceVariableName}.updateByIdAndTenantCode(${entityVariableName})){
	            return new ResponseEntity<Boolean>().badRequest("更新失败");    
	        }
	        return new ResponseEntity<Boolean>().ok("更新成功");

    }


    /**
     * 更新状态
     * 
     * @param tenantCode 租户代码
     * @param id
     * @param status 状态:ENABLE-可用，DISABLE-不可用，NEW_APPROVE-审批中（新建-记录不能用），MOD_APPROVE-审批中（修改-原纪录可用），DELETE-删除
     * @return
     */
    @PostMapping("update-status/{id}")
    public ResponseEntity<Boolean> updateStatus(@PathVariable(value = "tenantCode")  String tenantCode,
            @PathVariable(value = "id") Long id, String status) throws Exception {

            ${entity}Entity ${entityVariableName} = new ${entity}Entity();
            ${entityVariableName}.setId(id).setTenantCode(tenantCode).setStatus(status);
            ${entityVariableName}.setUpdateUserId(111L); // 最后修改者 TODO 测试
            if (!${serviceVariableName}.updateByIdAndTenantCode(${entityVariableName})) {
                return new ResponseEntity<Boolean>().badRequest("更新失败");
            }

            return new ResponseEntity<Boolean>().ok("更新成功");

    }
    
    
    /**
     * 逻辑删除
     * 
     * @param tenantCode 租户代码
     * @param id
     * @return
     */
    @PostMapping("/del/{id}")
    public ResponseEntity<Boolean> del(@PathVariable(value = "tenantCode")  String tenantCode,@PathVariable(value = "id") ${primaryKeyTypeString} id) throws Exception {

            ${entity}Entity ${entityVariableName} = new ${entity}Entity();
            ${entityVariableName}.setId(id).setTenantCode(tenantCode).setStatus(StatusEnum.DELETE.getCode());
            ${entityVariableName}.setUpdateUserId(111L); // 最后修改者 TODO 测试
            if (!${serviceVariableName}.updateByIdAndTenantCode(${entityVariableName})) {
                return new ResponseEntity<Boolean>().badRequest("删除失败");
            }
	        return new ResponseEntity<Boolean>().ok("删除成功");

    }

    /**
     * 物理删除
     * 
     * @param tenantCode 租户代码
     * @param id
     * @return
     */
    @PostMapping("/physical-del/{id}")
    public ResponseEntity<Boolean> physicalDel(@PathVariable(value = "tenantCode")  String tenantCode,@PathVariable(value = "id")  ${primaryKeyTypeString} id) throws Exception {

	        if (!${serviceVariableName}.deleteByIdAndTenantCode(tenantCode,id) ){
	            return new ResponseEntity<Boolean>().badRequest("删除失败");    
	        }
	        return new ResponseEntity<Boolean>().ok("删除成功");

    }

    
    
}